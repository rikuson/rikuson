---
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import PostList from '../components/preact/PostList';
import { SITE_DESCRIPTION, SITE_TITLE } from '../consts';
import { extractFirstImage } from '../utils/extract-first-image';
import { getCategories } from '../utils/categories';

// Get all posts from all categories dynamically
const categories = await getCategories();
const allPosts = [];

for (const category of categories) {
	const posts = await getCollection(category);
	allPosts.push(...posts.map(post => ({ ...post, category })));
}

// Sort posts by date (newest first)
const sortedPosts = allPosts.sort((a, b) => {
	const dateA = a.data.date || a.data.pubDate || new Date(0);
	const dateB = b.data.date || b.data.pubDate || new Date(0);
	return dateB.valueOf() - dateA.valueOf();
});

// Use all posts
const recentPosts = sortedPosts;

// Convert to format expected by PostList component
const posts = recentPosts.map(post => {
	// Extract excerpt from body if no description
	let excerpt = post.data.description || '';
	if (!excerpt && post.body) {
		// Remove markdown formatting and get first 150 characters
		const plainText = post.body
			.replace(/^---[\s\S]*?---/, '') // Remove frontmatter
			.replace(/^import\s+.*?;?\s*$/gm, '') // Remove import statements
			.replace(/<[^>]*>/g, '') // Remove HTML/JSX tags
			.replace(/#{1,6}\s/g, '') // Remove headers
			.replace(/[*_~`]/g, '') // Remove formatting
			.replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // Remove links
			.replace(/```[\s\S]*?```/g, '') // Remove code blocks
			.replace(/\n+/g, ' ') // Replace newlines with spaces
			.trim();
		excerpt = plainText.substring(0, 150) + (plainText.length > 150 ? '...' : '');
	}
	
	const autoImage = !post.data.image ? extractFirstImage(post.body) : undefined;
	
	return {
		id: `${post.category}-${post.id}`,
		url: `/${post.category}/${post.id}/`,
		title: post.data.title,
		date: (post.data.date || post.data.pubDate || new Date()).toISOString(),
		category: post.category,
		excerpt: excerpt,
		image: post.data.image || autoImage
	};
});
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>
			<div class="container-fluid pt-4 pb-2">
				<PostList posts={posts} client:only="preact" />
			</div>
		</main>
		<Footer />
	</body>
</html>
